# panw logstash.conf version: beta0.0.1
# panos version: 9.0.1 
# credits: 
#
# this file is based on PANOS 9.0 documentation found at this link
# https://docs.paloaltonetworks.com/pan-os/9-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions.html
# this file covers; traffic, threat, url, wildfire, tunnel, HIP Match, userID, system and config logs at this time.  to be added IP-tag, SCTP, Correlated, Authentication
# escape sequences note from panos docs: Any field that contains a comma or a double-quote is enclosed in double quotes. Furthermore, if a double-quote appears inside a field it is escaped by preceding it with another double-quote. To maintain backward compatibility, the Misc field in threat log is always enclosed in double-quotes.
# 
# dev notes: we decided to break each syslog logstream into separate udp ports, this can be changed to suit your enviroment.  having separate allows future break outs. like system and config going to a different ELK stack for example.
#
# inline dev notes on field definitions: 
#       rmvd (this field has been removed)
#       ecs  (this field meets ELASTICSEARCH ECS standards.  reference: https://github.com/elastic/ecs
#       cstm (this field is not in ECS, and is defined by us devs)
#       aecs (almost ecs, not an ECS standard, but followed closely. submitting to ECS to make part of the standard.)
#  cstm+rmvd (removed this field, you may want it if you use device_group_hierarchy or SCTP features. just edit out the '?' if need this field)
#  rmvd+later(this is just a tempary field that is removed later by the remove field function
#
# dev to do list:
#   a.) fix error in: panw.session_start_time
#   b.) split domain and user.name
#   c.) protect guility in logs remove/rename names
#   d.) flags and action flags expanded
#
#

input {

  udp {
    port => 5549
    add_field {
      "[labels][panw]" => "traps"
    }
  }

  udp {
    port => 5550
    add_field {
      "[labels][panw]" => "traffic"
    }
  }

  udp {
    port => 5551
    add_field {
      "[labels][panw]" => "threat"
    }
  }

  udp {
    port => 5552
    add_field {
      "[labels][panw]" => "url"
    }
  }

  udp {
    port => 5553
    add_field {
      "[labels][panw]" => "wildfire"
    }
  }

  udp {
    port => 5554
    add_field {
      "[labels][panw]" => "datafiltering"
    }
  }

  udp {
    port => 5555
    add_field {
      "[labels][panw]" => "userid"
    }
  }

  udp {
    port => 5556
    add_field {
      "[labels][panw]" => "tunnel"
    }
  }

  udp {
    port => 5557
    add_field {
      "[labels][panw]" => "HIPlog"
    }
  }

  udp {
    port => 5558
    add_field {
      "[labels][panos]" => "system"
    }
  }

  udp {
    port => 5559
    add_field {
      "[labels][panos]" => "config"
    }
  }

}

#
#
filter {

# Define your PANOS VERSION here (Available Options = 7.1, 8.0, 8.1 - 8.1 also maps to 9.0)
# FUTURE: We will look to automate checks for additional fields and observer.version

  mutate {
    add_field => {
      "ecs.version" => "1.0.0"
      "observer.type" => "firewall"
      "observer.vendor" => "Palo Alto Networks"
      "observer.version" => "8.1"
    }
  }

  if ["[labels][panw]"] == "traffic" {

    if [observer.version] == "7.1" {

      dissect { mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.log_subtype},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.port_nat},%{destination.port_nat},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.port_nat},%{destination.port_nat},%{panw.flags},%{network.protocol},%{event.action},%{network.bytes},%{network.bytes_sent},%{network.bytes_received},%{network.packets},%{panw.session.start_time},%{event.duration},%{event.outcome},%{?FUTURE_USE},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{network.packets_sent},%{network.packets_received},%{panw.session_end_reason},%{panw.device_group_hierarchy_level_1},%{panw.device_group_hierarchy_level_2},%{panw.device_group_hierarchy_level_3},%{panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{panw.device_name},%{panw.action_source}" } }

    } else if [observer.version] == "8.0" {

      dissect { mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.log_subtype},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.port_nat},%{destination.port_nat},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface}%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.port_nat},%{destination.port_nat},%{panw.flags},%{network.protocol},%{event.action},%{network.bytes},%{network.bytes_sent},%{network.bytes_received},%{network.packets},%{panw.session.start_time},%{event.duration},%{event.outcome},%{?FUTURE_USE},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{network.packets_sent},%{network.packets_received},%{panw.session_end_reason},%{panw.device_group_hierarchy_level_1},%{panw.device_group_hierarchy_level_2},%{panw.device_group_hierarchy_level_3},%{panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{panw.device_name},%{panw.action_source},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type}" } }

    } else if [observer.version] == "8.1" {

#       if [observer.version] == "8.1" {

      dissect { mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.log_subtype},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{network.bytes},%{destination.bytes},%{source.bytes},%{network.packets},%{panw.session_start_time},%{event.duration},%{event.outcome},%{?FUTURE_USE},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{destination.packets},%{source.packets},%{panw.session_end_reason},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{panw.action_source},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{?panw.SCTP_association_ID},%{?panw.SCTP_chunks},%{?panw.SCTP_chunks_sent},%{?panw.SCTP_chunks_received}" } }

    }

    mutate {
        convert => [ "network.bytes", "integer" ]
        convert => [ "source.bytes", "integer" ]
        convert => [ "destination.bytes", "integer" ]
        convert => [ "event.duration", "integer" ]
        convert => [ "destination.port", "integer" ]
        convert => [ "source.port", "integer" ]
        convert => [ "panw.session_id", "integer" ]
        convert => [ "event.repeat_count", "integer" ]
        convert => [ "destination.nat.port", "integer" ]
        convert => [ "source.nat.port", "integer" ]
        convert => [ "network.packets", "integer" ]
        convert => [ "source.packets", "integer" ]
        convert => [ "destination.packets", "integer" ]
        convert => [ "panw.sequence_number", "integer" ]
        remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panw]"] == "threat" {

    if [observer.version] == "7.1" {

      dissect { mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.threat_type},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{url.full},%{panw.threat_ID},%{event.outcome},%{event.severity.text},%{event.direction},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{panw.content_type},%{panw.PCAP_ID},%{panw.file_digest},%{panw.cloud},%{url.index},%{panw.user_agent},%{panw.file_type},%{panw.X_forwarded_for},%{panw.referrer},%{panw.sender},%{panw.subject},%{panw.recipient},%{panw.report_ID},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{http.request.method},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{panw.threat_category},%{panw.content_version},%{?FUTURE_USE}" } }

    } else if [observer.version] == "8.0" {

      dissect { mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.threat_type},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{url.full},%{panw.threat_ID},%{event.outcome},%{event.severity.text},%{event.direction},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{panw.content_type},%{panw.PCAP_ID},%{panw.file_digest},%{panw.cloud},%{url.index},%{panw.user_agent},%{panw.file_type},%{panw.X_forwarded_for},%{panw.referrer},%{panw.sender},%{panw.subject},%{panw.recipient},%{panw.report_ID},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{http.request.method},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{panw.threat_category},%{panw.content_version},%{?FUTURE_USE}" } }

    } else if [observer.version] == "8.1" {

#     if [observer.version] == "8.1" {

      dissect { mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.threat_type},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{url.full},%{panw.threat_ID},%{event.outcome},%{event.severity.text},%{event.direction},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{panw.content_type},%{panw.PCAP_ID},%{panw.file_digest},%{panw.cloud},%{url.index},%{panw.user_agent},%{panw.file_type},%{panw.X_forwarded_for},%{panw.referrer},%{panw.sender},%{panw.subject},%{panw.recipient},%{panw.report_ID},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{http.request.method},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{panw.threat_category},%{panw.content_version},%{?FUTURE_USE},%{?panw.SCTP_association_ID},%{panw.payload_protocol_ID},%{http.headers}" } }

    }

    mutate {
      convert => [ "destination.port", "integer" ]
      convert => [ "source.port", "integer" ]
      convert => [ "panw.session_id", "integer" ]
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "destination.nat.port", "integer" ]
      convert => [ "source.nat.port", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
#         remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panw]"] == "url" {

    dissect {

      mapping => { "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.threat_type},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{url.full},%{panw.threat_ID},%{event.outcome},%{event.severity.text},%{event.direction},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{panw.content_type},%{panw.PCAP_ID},%{panw.file_digest},%{panw.cloud},%{url.index},%{panw.user_agent},%{panw.file_type},%{panw.X_forwarded_for},%{panw.referrer},%{panw.sender},%{panw.subject},%{panw.recipient},%{panw.report_ID},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{http.request.method},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{panw.threat_category},%{panw.content_version},%{?FUTURE_USE},%{?panw.SCTP_association_ID},%{panw.payload_protocol_ID},%{?FUTURE_USE},%{event.outcome1},%{event.outcome2},%{?FUTURE_USE}" }

    }

    mutate {
#               removing double quotes from URL values
      gsub => [ "url.full", "\"","" ]
      gsub => [ "event.outcome1", "\"", "" ]
      gsub => [ "event.outcome2", "\"", "" ]
      convert => [ "destination.port", "integer" ]
      convert => [ "source.port", "integer" ]
      convert => [ "panw.session_id", "integer" ]
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "destination.nat.port", "integer" ]
      convert => [ "source.nat.port", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panw]"] == "wildfire" {

    dissect {

      mapping => {

        "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.threat_type},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{url.full},%{panw.threat_ID},%{event.outcome},%{event.severity.text},%{event.direction},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{panw.content_type},%{panw.PCAP_ID},%{panw.file_digest},%{panw.cloud},%{url.index},%{panw.user_agent},%{panw.file_type},%{panw.X_forwarded_for},%{panw.referrer},%{panw.sender},%{panw.subject},%{panw.recipient},%{panw.report_ID},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{http.request.method},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{panw.threat_category},%{panw.content_version},%{?FUTURE_USE},%{?panw.SCTP_association_ID},%{panw.payload_protocol_ID},%{http.headers}"

      }

    }

    mutate {
      convert => [ "destination.port", "integer" ]
      convert => [ "source.port", "integer" ]
      convert => [ "panw.session_id", "integer" ]
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "destination.nat.port", "integer" ]
      convert => [ "source.nat.port", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panw]"] == "datafiltering" {

    dissect {

      mapping => {

        "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.threat_type},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{url.full},%{panw.threat_ID},%{event.outcome},%{event.severity.text},%{event.direction},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?FUTURE_USE},%{panw.content_type},%{panw.PCAP_ID},%{panw.file_digest},%{panw.cloud},%{url.index},%{panw.user_agent},%{panw.file_type},%{panw.X_forwarded_for},%{panw.referrer},%{panw.sender},%{panw.subject},%{panw.recipient},%{panw.report_ID},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE},%{panw.source_VM_UUID},%{panw.destination_VM_UUID},%{http.request.method},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel_type},%{panw.threat_category},%{panw.content_version},%{?FUTURE_USE},%{?panw.SCTP_association_ID},%{panw.payload_protocol_ID},%{http.headers}"

      }

    }

    mutate {
      convert => [ "destination.port", "integer" ]
      convert => [ "source.port", "integer" ]
      convert => [ "panw.session_id", "integer" ]
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "destination.nat.port", "integer" ]
      convert => [ "source.nat.port", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panw]"] == "userid" {

    dissect {

      mapping => {

        "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.content_type},%{?FUTURE_USE},%{event.created},%{panw.virtual_system},%{source.ip},%{user.name},%{panw.data_source Name},%{panw.event_ID},%{event.repeat_count},%{panw.time_out_threshold},%{source.port},%{destination.port},%{panw.data_source},%{panw.data_source_type},%{panw.sequence_number},%{panw.action_flags},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{panw.virtual_system_ID},%{panw.factor_type},%{panw.factor_completion_time},%{panw.factor_number},%{?FUTURE_USE},%{?FUTURE_USE}"

      }

    }

    mutate {
      convert => [ "destination.port", "integer" ]
      convert => [ "source.port", "integer" ]
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "destination.nat.port", "integer" ]
      convert => [ "source.nat.port", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]        
    }

  }

  if ["[labels][panw]"] == "tunnel" {

    dissect {

      mapping => {

        "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.subtype},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{source.nat.ip},%{destination.nat.ip},%{panw.rule_name},%{source.user.name},%{destination.user.name},%{network.application},%{panw.virtual_system},%{source.zone},%{destination.zone},%{panw.inbound_interface},%{panw.outbound_interface},%{panw.log_action},%{?FUTURE_USE},%{panw.session_id},%{event.repeat_count},%{source.port},%{destination.port},%{source.nat.port},%{destination.nat.port},%{panw.flags},%{network.protocol},%{event.action},%{event.severity.text},%{panw.sequence_number},%{panw.action_flags},%{source.geo.country_name},%{destination.geo.country_name},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{panw.tunnel_ID/IMSI},%{panw.monitor_tag/IMEI},%{panw.parent_session_ID},%{panw.parent_start_time},%{panw.tunnel},%{network.bytes},%{destination.bytes},%{source.bytes},%{network.packets},%{destination.packets},%{panw.maximum_encapsulation},%{panw.unknown_protocol},%{panw.strict_check},%{panw.tunnel_fragment},%{panw.session_created},%{panw.session_closed},%{panw.session_end_reason},%{panw.action_source},%{panw.session_start_time},%{event.duration},%{panw.tunnel_inspection_rule}"

      }

    }

    mutate {
      convert => [ "network.bytes", "integer" ]
      convert => [ "source.bytes", "integer" ]
      convert => [ "destination.bytes", "integer" ]
      convert => [ "event.duration", "integer" ]
      convert => [ "destination.port", "integer" ]
      convert => [ "source.port", "integer" ]
      convert => [ "panw.session_id", "integer" ]
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "destination.nat.port", "integer" ]
      convert => [ "source.nat.port", "integer" ]
      convert => [ "network.packets", "integer" ]
      convert => [ "source.packets", "integer" ]
      convert => [ "destination.packets", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]    
    }

  }

  if ["[labels][panw]"] == "HIPlog" {

    dissect {

      mapping => {
        "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{?Threat/Content Type},%{?FUTURE_USE},%{event.created},%{source.user.name},%{panw.virtual_system},%{Machine name},%{OS},%{Source Address},%{HIP_reportname},%{event.repeat_count},%{HIP Type},%{?FUTURE_USE},%{?FUTURE_USE},%{panw.sequence_number},%{panw.action_flags},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{Virtual System ID},%{IPv6 Source Address},%{Host ID},%{?FUTURE_USE}"
      }

    }

    mutate {
      convert => [ "event.repeat_count", "integer" ]
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panos]"] == "config" {

    dissect {

      mapping => {

        "message" =>"%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{?Subtype},%{?FUTURE_USE},%{event.created},%{panw.admin_ip},%{panw.virtual_system},%{panw.command},%{panw.admin_username},%{panw.from_CLI/Web},%{panw.cmd_result},%{panw.configuration_path},%{panw.before_change},%{panw.sequence_number},%{panw.action_flags},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname},%{?FUTURE_USE}"

      }

    }

    mutate {
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message", "host"]
    }

  }

  if ["[labels][panos]"] == "system" {

    dissect {

      mapping => {

#    Sample                   <14>Mar 26 23:48:03 mah1mgmt.XStratum.net 1,2019/03/26 23:48:03,011901000306,SYSTEM,general,0,2019/03/26 23:48:03,,general,,0,0,general,informational,"Connection to Update server: updates.paloaltonetworks.com completed successfully, initiated by 192.168.54.251",3941525,0x0,0,0,0,0,,mah1mgmt

        "message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{observer.serial_number},%{?Log Type},%{panw.event_type},%{?FUTURE_USE},%{event.created},%{panw.virtual_system},%{panw.event_ID},%{panw.object},%{?FUTURE_USE},%{?FUTURE_USE},%{panw.module},%{event.severity.text},%{more}"

        "more" => '"%{event.description}",%{even_more}'

        "even_more" => "%{panw.sequence_number},%{panw.action_flags},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{panw.virtual_system_name},%{observer.hostname}"

      }

    }

    mutate {
      convert => [ "panw.sequence_number", "integer" ]
      remove_field => [ "message","more","even_more","host" ]
    }

  }

#  this is for traps ESM format 
  if ["[labels][panw]"] == "traps" {

    dissect {

      mapping => {

# sample    <134>1 2019-03-30T01:09:05.00Z-04:00 192.168.55.250 - - - Mar 30 2019 01:09:05,Traps ESM,4.2.3.41131,System,User Login,ESMDemo01,mharman,,,User mharman logged in to ESM console,3,,,,,            

        "message" => "%{?FUTURE_USE},%{panw.typetraps},%{panw.somenumber},%{panw.msg},%{panw.msgdetail},%{observer.hostname},%{user.name},%{?FUTURE_USE},%{?facility},%{event.description}" 
      }

    }

    mutate {
      remove_field => [ "message","host" ]
    }

  }
#
  if [source.ip] and [destination.ip] {

    fingerprint {
      concatenate_sources => true
      method => "SHA1"
      key => "logstash"
      source => ["source.ip", "destination.ip", "source.port", "destination.port", "network.protocol"]
      target => "event.hash"
    }

  }

  metrics {
    meter => "events"
    add_tag => "metric"
  }

  mutate {
    copy => { "event.created" => "@timestamp" }
  }

}

output {

  elasticsearch {

    hosts => "elasticsearch:9200"
    manage_template => true
    template => "panw_ecs_template.json"
    template_name => "panw_ecs_template"
    template_overwrite => true

    if ["[labels][panw]"] == "traps" {
      index => "panw.traps-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "traffic" {
      index => "panw.traffic-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "threat" {
      index => "panw.threat-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "url" {
      index => "panw.url-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "wildfire" {
      index => "panw.wildfire-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "datafiltering" {
      index => "panw.datafiltering-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "userid" {
      index => "panw.userid-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "tunnel" {
      index => "panw.tunnel-%{+YYYY.MM.dd}"
    }

    if ["[labels][panw]"] == "HIPlog" {
      index => "panw.HIPlog-%{+YYYY.MM.dd}"
    }

    if ["[labels][panos]"] == "config" {
      index => "panos.config-%{+YYYY.MM.dd}"
    }

    if ["[labels][panos]"] == "system" {
      index => "panos.system-%{+YYYY.MM.dd}"
    }

  }

  stdout { codec => rubydebug }

}
